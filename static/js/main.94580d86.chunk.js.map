{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","src","alt","Movie","_ref","title","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kOC+BxC,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,IAAiCJ,EAAjC,KAGT,SAASK,EAATC,GAAiC,IAAVC,EAAUD,EAAVC,OACrB,OAAON,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAQE,IAAI,eAAeL,UAAU,kBAYzCM,MA5Cf,SAAAC,GAAoD,IAAnCC,EAAmCD,EAAnCC,MAAOL,EAA4BI,EAA5BJ,OAAQM,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,SACtC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQE,IAAKG,KAEpCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OACVf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAInCf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBU,MCqCxBI,6MA/CbC,MAAQ,KAMRC,cAAgB,WAcd,OAZeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GAEnC,OADAC,QAAQC,IAAIF,GAEVtB,EAAAC,EAAAC,cAACuB,EAAD,CACEd,MAAOW,EAAMI,cACbpB,OAAQgB,EAAMK,mBACdX,IAAKM,EAAMM,GACXhB,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAOxBgB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAIXjB,EAAKkB,SAAS,CACZjB,WALS,wBAAAY,EAAAM,SAAAT,QASbM,SAAW,WACT,OAAOI,MAAM,6DACVC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFAjC5BC,KAAKlB,8CAoCL,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ4C,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBA7ClC6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.94580d86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      {/* jsx에서는 className이라고써야됨 */}\r\n      <div className=\"Movie_Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie_Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n            // 그냥 써도 되지만 컴포넌트를 쓰는게 좀더 세련된방식\r\n          ))}\r\n        </div>\r\n        <p className=\"Movie__Synosis\">{synopsis}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n};\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\"> {genre} </span>;\r\n}\r\n\r\nfunction MoviePoster({ poster }) {\r\n  return <img src={poster} alt=\"Movie Poster\" className=\"Movie__Poster\" />;\r\n} // img 태그의 alt 속성은 이미지 주소가 틀리면 보여주는 내용\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate()\n  //          -> render() -> componentDidUpdate()\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    //_를 붙인이유는 리액트 자체 함수도 많아서 섞임방지\n    const movies = this.state.movies.map(movie => {\n      console.log(movie);\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id} // 컴포넌트 key는 인덱스로 사용안하는게좋음 느림\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    // await는 callApi가 끝나는걸 기다리고 return value가 뭐든 movies에 넣음\n    // await 에 있는 작업이 성공이든 실패든 끝나야 setState가 실행됨\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=like_count\")\n      .then(potato => potato.json())\n      .then(json => json.data.movies) // 대괄호없어서 그냥 바로 리턴해줌\n      .catch(err => console.log(err));\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}